#!/bin/bash

echo -e "\033[31mThis command, bbox, is deprecated, use bbox.py instead\033[0m" >&2
exit 1

export PATH=`dirname $0`:$PATH
export PYTHONDONTWRITEBYTECODE=1
export PY3=`which python3`

function help() {
    echo "bbox - bixin's micro services toolkit"
    echo "usage: bbox <command> [args] [options]"
    echo 'commands'
    echo ' init                      - generate .bbox/ticket.json'
    echo ' start <modspec> [modspec] - start rpc server'
    echo ' httpd <modspec>           - start httpd and load module'
    echo ' metrics                   - prometheus metrics url'
    echo ' run <modspec> [modspec]   - run tasks'
    echo ' rpc <srv::method> <arg> [arg] - trigger rpc request'
    echo ' config <op> <arg> [arg]   - config operations'
    echo ' cluster info              - print boxes in the cluster'
    echo ' genkey <prefix>           - generate self-signed pkey and ca'
    echo ' lock <name> [command]     - exec command after acquiring lock '
}

function genkey() {
    # refer to https://devcenter.heroku.com/articles/ssl-certificate-self
    prefix=$1
    if [ -z $prefix ]; then
        echo 'you must provide a key prefix, ie. server' >&2
        exit 1
    fi
    cert_root=./.bbox/certs/$prefix

    mkdir -p $cert_root
    if [ -f $cert_root/$prefix.key ]; then
        echo The private key $cert_root/$prefix.key already exist! It is dangrous to overwrite it.
        exit 1
    fi
    cd $cert_root

    echo generating privkey
    openssl genrsa -des3 -passout pass:x -out $prefix.pass.key 2048
    openssl rsa -passin pass:x -in $prefix.pass.key -out $prefix.key
    rm $prefix.pass.key
    openssl req -new -key $prefix.key -out $prefix.csr

    # make it valid for 10 years
    openssl x509 -req -sha256 -days 3650 -in $prefix.csr -signkey $prefix.key -out $prefix.crt

    echo '*** Generating p12 ***'
    openssl pkcs12 -export -in $prefix.crt -inkey $prefix.key -out $prefix.p12

    cd ../..
    echo keys generated to ./$cert_root
}

function check-ticket() {
    lang=`$PY3 -m aiobbox.tools.printticket language`
    if [ $? -ne 0 ]; then
        echo 'ticket not found or not correct, run bbox init first' >&2
        exit 1
    fi
}

case "$1" in
    init)
        exec $PY3 -m aiobbox.tools.initprj "${@:2}"
        ;;
    start)
        check-ticket
        lang=`$PY3 -m aiobbox.tools.printticket language`
        if [ "x${lang}" == 'xpython3' ]; then
            exec $PY3 -m aiobbox.tools.startbox "${@:2}"
        else
            # TODO: support nodejs
            echo language $lang not supported
            exit 1
        fi
        ;;
    httpd)
        check-ticket
        lang=`$PY3 -m aiobbox.tools.printticket language`
        if [ "x${lang}" == 'xpython3' ]; then
            exec $PY3 -m aiobbox.tools.starthttpd "${@:2}"
        else
            # TODO: support nodejs
            echo language $lang not supported
            exit 1
        fi
        ;;
    metrics)
        exec bbox httpd aiobbox.services.metrics "${@:2}"
        ;;
    run)
        check-ticket
        lang=`$PY3 -m aiobbox.tools.printticket language`
        if [ "x$lang" == 'xpython3' ]; then
            exec $PY3 -m aiobbox.tools.runtask "${@:2}"
        else
            # TODO: support nodejs
            echo language $lang not supported
            exit 1
        fi
        ;;
    rpc)
        exec $PY3 -m aiobbox.tools.rpcclient "${@:2}"
        ;;
    config)
        exec $PY3 -m aiobbox.tools.clusterconfig "${@:2}"
        ;;
    cluster)
        exec $PY3 -m aiobbox.tools.clusterop "${@:2}"
        ;;
    lock)
        exec $PY3 -m aiobbox.tools.watchlock "${@:2}"
        ;;
    genkey)
        genkey $2
        ;;
    *)
        help
        ;;
esac
